// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: raftd/v1/raft.proto

package raftdv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/amjadjibon/raftd/gen/raftd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RaftServiceName is the fully-qualified name of the RaftService service.
	RaftServiceName = "raftd.v1.RaftService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RaftServiceJoinProcedure is the fully-qualified name of the RaftService's Join RPC.
	RaftServiceJoinProcedure = "/raftd.v1.RaftService/Join"
	// RaftServiceLeaveProcedure is the fully-qualified name of the RaftService's Leave RPC.
	RaftServiceLeaveProcedure = "/raftd.v1.RaftService/Leave"
	// RaftServiceStatusProcedure is the fully-qualified name of the RaftService's Status RPC.
	RaftServiceStatusProcedure = "/raftd.v1.RaftService/Status"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	raftServiceServiceDescriptor      = v1.File_raftd_v1_raft_proto.Services().ByName("RaftService")
	raftServiceJoinMethodDescriptor   = raftServiceServiceDescriptor.Methods().ByName("Join")
	raftServiceLeaveMethodDescriptor  = raftServiceServiceDescriptor.Methods().ByName("Leave")
	raftServiceStatusMethodDescriptor = raftServiceServiceDescriptor.Methods().ByName("Status")
)

// RaftServiceClient is a client for the raftd.v1.RaftService service.
type RaftServiceClient interface {
	Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error)
	Leave(context.Context, *connect.Request[v1.LeaveRequest]) (*connect.Response[v1.LeaveResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
}

// NewRaftServiceClient constructs a client for the raftd.v1.RaftService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRaftServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RaftServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &raftServiceClient{
		join: connect.NewClient[v1.JoinRequest, v1.JoinResponse](
			httpClient,
			baseURL+RaftServiceJoinProcedure,
			connect.WithSchema(raftServiceJoinMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		leave: connect.NewClient[v1.LeaveRequest, v1.LeaveResponse](
			httpClient,
			baseURL+RaftServiceLeaveProcedure,
			connect.WithSchema(raftServiceLeaveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		status: connect.NewClient[v1.StatusRequest, v1.StatusResponse](
			httpClient,
			baseURL+RaftServiceStatusProcedure,
			connect.WithSchema(raftServiceStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// raftServiceClient implements RaftServiceClient.
type raftServiceClient struct {
	join   *connect.Client[v1.JoinRequest, v1.JoinResponse]
	leave  *connect.Client[v1.LeaveRequest, v1.LeaveResponse]
	status *connect.Client[v1.StatusRequest, v1.StatusResponse]
}

// Join calls raftd.v1.RaftService.Join.
func (c *raftServiceClient) Join(ctx context.Context, req *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error) {
	return c.join.CallUnary(ctx, req)
}

// Leave calls raftd.v1.RaftService.Leave.
func (c *raftServiceClient) Leave(ctx context.Context, req *connect.Request[v1.LeaveRequest]) (*connect.Response[v1.LeaveResponse], error) {
	return c.leave.CallUnary(ctx, req)
}

// Status calls raftd.v1.RaftService.Status.
func (c *raftServiceClient) Status(ctx context.Context, req *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return c.status.CallUnary(ctx, req)
}

// RaftServiceHandler is an implementation of the raftd.v1.RaftService service.
type RaftServiceHandler interface {
	Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error)
	Leave(context.Context, *connect.Request[v1.LeaveRequest]) (*connect.Response[v1.LeaveResponse], error)
	Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error)
}

// NewRaftServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRaftServiceHandler(svc RaftServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	raftServiceJoinHandler := connect.NewUnaryHandler(
		RaftServiceJoinProcedure,
		svc.Join,
		connect.WithSchema(raftServiceJoinMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raftServiceLeaveHandler := connect.NewUnaryHandler(
		RaftServiceLeaveProcedure,
		svc.Leave,
		connect.WithSchema(raftServiceLeaveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	raftServiceStatusHandler := connect.NewUnaryHandler(
		RaftServiceStatusProcedure,
		svc.Status,
		connect.WithSchema(raftServiceStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/raftd.v1.RaftService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RaftServiceJoinProcedure:
			raftServiceJoinHandler.ServeHTTP(w, r)
		case RaftServiceLeaveProcedure:
			raftServiceLeaveHandler.ServeHTTP(w, r)
		case RaftServiceStatusProcedure:
			raftServiceStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRaftServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRaftServiceHandler struct{}

func (UnimplementedRaftServiceHandler) Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raftd.v1.RaftService.Join is not implemented"))
}

func (UnimplementedRaftServiceHandler) Leave(context.Context, *connect.Request[v1.LeaveRequest]) (*connect.Response[v1.LeaveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raftd.v1.RaftService.Leave is not implemented"))
}

func (UnimplementedRaftServiceHandler) Status(context.Context, *connect.Request[v1.StatusRequest]) (*connect.Response[v1.StatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raftd.v1.RaftService.Status is not implemented"))
}
