// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: raftd/v1/store.proto

package raftdv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/amjadjibon/raftd/gen/raftd/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// KVServiceName is the fully-qualified name of the KVService service.
	KVServiceName = "raftd.v1.KVService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KVServiceSetProcedure is the fully-qualified name of the KVService's Set RPC.
	KVServiceSetProcedure = "/raftd.v1.KVService/Set"
	// KVServiceGetProcedure is the fully-qualified name of the KVService's Get RPC.
	KVServiceGetProcedure = "/raftd.v1.KVService/Get"
	// KVServiceDeleteProcedure is the fully-qualified name of the KVService's Delete RPC.
	KVServiceDeleteProcedure = "/raftd.v1.KVService/Delete"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	kVServiceServiceDescriptor      = v1.File_raftd_v1_store_proto.Services().ByName("KVService")
	kVServiceSetMethodDescriptor    = kVServiceServiceDescriptor.Methods().ByName("Set")
	kVServiceGetMethodDescriptor    = kVServiceServiceDescriptor.Methods().ByName("Get")
	kVServiceDeleteMethodDescriptor = kVServiceServiceDescriptor.Methods().ByName("Delete")
)

// KVServiceClient is a client for the raftd.v1.KVService service.
type KVServiceClient interface {
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewKVServiceClient constructs a client for the raftd.v1.KVService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKVServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KVServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kVServiceClient{
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+KVServiceSetProcedure,
			connect.WithSchema(kVServiceSetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+KVServiceGetProcedure,
			connect.WithSchema(kVServiceGetMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+KVServiceDeleteProcedure,
			connect.WithSchema(kVServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// kVServiceClient implements KVServiceClient.
type kVServiceClient struct {
	set    *connect.Client[v1.SetRequest, v1.SetResponse]
	get    *connect.Client[v1.GetRequest, v1.GetResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
}

// Set calls raftd.v1.KVService.Set.
func (c *kVServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Get calls raftd.v1.KVService.Get.
func (c *kVServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Delete calls raftd.v1.KVService.Delete.
func (c *kVServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// KVServiceHandler is an implementation of the raftd.v1.KVService service.
type KVServiceHandler interface {
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
}

// NewKVServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKVServiceHandler(svc KVServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kVServiceSetHandler := connect.NewUnaryHandler(
		KVServiceSetProcedure,
		svc.Set,
		connect.WithSchema(kVServiceSetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kVServiceGetHandler := connect.NewUnaryHandler(
		KVServiceGetProcedure,
		svc.Get,
		connect.WithSchema(kVServiceGetMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	kVServiceDeleteHandler := connect.NewUnaryHandler(
		KVServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(kVServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/raftd.v1.KVService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KVServiceSetProcedure:
			kVServiceSetHandler.ServeHTTP(w, r)
		case KVServiceGetProcedure:
			kVServiceGetHandler.ServeHTTP(w, r)
		case KVServiceDeleteProcedure:
			kVServiceDeleteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKVServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKVServiceHandler struct{}

func (UnimplementedKVServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raftd.v1.KVService.Set is not implemented"))
}

func (UnimplementedKVServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raftd.v1.KVService.Get is not implemented"))
}

func (UnimplementedKVServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("raftd.v1.KVService.Delete is not implemented"))
}
